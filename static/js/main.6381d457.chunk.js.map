{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api/getMovie.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","getMovie","query","a","fetch","response","json","FindMovie","addMovie","useState","setMovie","setQuery","error","setError","duplicate","setDuplicate","handleSearch","movieFromApi","Title","Plot","Poster","imdbID","Response","onSubmit","event","preventDefault","some","film","htmlFor","type","id","onChange","target","value","onFocus","placeholder","onClick","App","state","data","every","item","setState","prevState","this","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6381d457.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map((movie) => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","const API_URL = 'https://www.omdbapi.com/?apikey=7c96957b&t=';\n\nexport const getMovie = async (query: string) => {\n  const response = await fetch(`${API_URL}${query}`);\n\n  return response.json();\n};","import React, {\n  FC, useState, ChangeEvent, FormEvent,\n} from 'react';\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/getMovie';\nimport './FindMovie.scss';\n\nconst URL_IMDB = 'https://www.imdb.com/title/';\n\ninterface Props {\n  addMovie: (movie: Movie) => void;\n  movies: Movie[];\n}\n\nexport const FindMovie: FC<Props> = ({ addMovie, movies }) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [query, setQuery] = useState('');\n  const [error, setError] = useState(false);\n  const [duplicate, setDuplicate] = useState(false);\n\n  const handleChange = ({ target }: ChangeEvent<HTMLInputElement>): void => {\n    setQuery(target.value);\n  };\n\n  const handleSearch = async () => {\n    const movieFromApi = await getMovie(query);\n    const {\n      Title: title,\n      Plot: description,\n      Poster: imgUrl,\n      imdbID: imdbId,\n      Response: response,\n    } = movieFromApi;\n\n    if (response === 'True') {\n      const imdbUrl = URL_IMDB + imdbId;\n      const newMovie = {\n        title,\n        description,\n        imgUrl,\n        imdbId,\n        imdbUrl,\n      };\n      setMovie(newMovie);\n      setError(false);\n      setDuplicate(false);\n    } else {\n      setError(true);\n    }\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (movie) {\n      const duplicate = movies.some(film => film.imdbId === movie.imdbId);\n      setDuplicate(duplicate);\n    }\n    if (!duplicate && movie) {\n      addMovie(movie);\n      setQuery('');\n      setMovie(null);\n    } \n  };\n\n  const handleFocus = () => {\n    setError(false);\n    setDuplicate(false);\n  };\n\n  return(\n    <>\n    <form className=\"find-movie\" onSubmit={handleSubmit}>\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"movie-title\">\n          Movie title\n        </label>\n\n        <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              onChange={handleChange}\n              onFocus={handleFocus}\n              value={query}\n              placeholder=\"Enter a title to search\"\n              className={error ? 'input is-danger' : 'input'}\n            />\n          </div>\n          {error && \n            <p className=\"help is-danger\">\n               Can&apos;t find a movie with such a title\n            </p>}\n          {duplicate && \n            <p className=\"help is-danger\">\n               Movie already exists\n            </p>}  \n      </div>\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className=\"button is-light\"\n            onClick={handleSearch}\n          >\n            Find a movie\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className=\"button is-primary\"\n          >\n            Add to the list\n          </button>\n        </div>\n      </div>\n    </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        <p>{movie?.title}</p>\n        {movie && <MovieCard {...movie} />}\n      </div>\n  </>\n  );\n}\n\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends Component<{}, State> {\n  state: State = {\n    movies: data,\n  };\n\n  addMovie = (movie: Movie) => {\n    if (this.state.movies.every(item => item.imdbId !== movie.imdbId)) {\n    this.setState(prevState => ({\n      movies: [...prevState.movies, movie],\n    }))\n    }\n  }\n\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <FindMovie addMovie={this.addMovie} movies={movies}/>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}